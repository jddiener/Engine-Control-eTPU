/* This file is auto-generated by the ASH WARE ETEC Linker. */
/* It contains useful information for host-CPU side driver code */
/*    !!!   DO NOT EDIT THIS FILE   !!! */
/* Copyright (C) 2015 ASH WARE, Inc. */

#ifndef __etpu_set_struct_H
#define __etpu_set_struct_H


/* data structure (map) of all non-24-bit GLOBAL data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				eng_pos_state;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint8				inj_global_active_bank_chans_parts_bits31_24;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_sint32				_Global_error_data;
} etpu_if_GLOBAL_DATA;
#define etpu_if_GLOBAL_DATA_EXPECTED_SIZE 24


/* data structure of all 24-bit GLOBAL data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				eng_cycle_tcr2_ticks;
	/* 0x0004 */
	etpu_if_uint32				eng_cycle_tcr2_start;
	/* 0x0008 */
	etpu_if_uint32				eng_trr_norm;
	/* 0x000c */
	etpu_if_uint32				tooth_period;
	/* 0x0010 */
	etpu_if_uint32				inj_global_active_bank_chans_parts_bits23_0;
	/* 0x0014 */
	etpu_if_uint32 : 32;
} etpu_if_GLOBAL_DATA_PSE;
#define etpu_if_GLOBAL_DATA_PSE_EXPECTED_SIZE 24


/* data structure of all unsigned 24-bit GLOBAL data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				eng_cycle_tcr2_ticks;
	/* 0x0004 */
	etpu_if_uint32				eng_cycle_tcr2_start;
	/* 0x0008 */
	etpu_if_uint32				eng_trr_norm;
	/* 0x000c */
	etpu_if_uint32				tooth_period;
	/* 0x0010 */
	etpu_if_uint32				inj_global_active_bank_chans_parts_bits23_0;
	/* 0x0014 */
	etpu_if_uint32 : 32;
} etpu_if_GLOBAL_DATA_unsignedPSE;
#define etpu_if_GLOBAL_DATA_unsignedPSE_EXPECTED_SIZE 24


/* data structure (map) of all non-24-bit TG CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				teeth_till_gap;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_sint8				teeth_in_gap;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_uint8				teeth_per_cycle;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint8				tooth_counter_gap;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint8				tooth_counter_cycle;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_uint8				cam_chan;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0018 */
	etpu_if_uint8				generation_disable;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_TG_CHANNEL_FRAME;
#define etpu_if_TG_CHANNEL_FRAME_EXPECTED_SIZE 32


/* data structure of all 24-bit TG CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				tooth_tcr1_time;
	/* 0x0004 */
	etpu_if_sint32				tooth_period_actual;
	/* 0x0008 */
	etpu_if_sint32				tooth_period_target;
	/* 0x000c */
	etpu_if_uint32				accel_ratio;
	/* 0x0010 */
	etpu_if_uint32				p_cam_tooth_first;
	/* 0x0014 */
	etpu_if_uint32				p_cam_tooth;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_TG_CHANNEL_FRAME_PSE;
#define etpu_if_TG_CHANNEL_FRAME_PSE_EXPECTED_SIZE 32


/* data structure of all signed 24-bit TG CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_sint32				tooth_period_actual;
	/* 0x0008 */
	etpu_if_sint32				tooth_period_target;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_TG_CHANNEL_FRAME_signedPSE;
#define etpu_if_TG_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 32


/* data structure of all unsigned 24-bit TG CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				tooth_tcr1_time;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32				accel_ratio;
	/* 0x0010 */
	etpu_if_uint32				p_cam_tooth_first;
	/* 0x0014 */
	etpu_if_uint32				p_cam_tooth;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_TG_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_TG_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 32


/* data structure (map) of all non-24-bit SPARK CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				spark_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint8				spark_counter;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_uint8				multi_pulse_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint8				multi_pulse_counter;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint8				state;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_uint8				error;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0018 */
	etpu_if_uint8				generation_disable;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x001c */
	union {
		etpu_if_uint8			_UNIT;
		struct {
#if defined(MSB_BITFIELD_ORDER)
			etpu_if_uint8 : 7;
			etpu_if_uint8		is_first_recalc : 1;
#elif defined(LSB_BITFIELD_ORDER)
			etpu_if_uint8		is_first_recalc : 1;
			etpu_if_uint8 : 7;
#else
#error Users of auto-struct must define either MSB_BITFIELD_ORDER or LSB_BITFIELD_ORDER
#endif
		} _BF;
	} _BF_UNIT_001c;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
} etpu_if_SPARK_CHANNEL_FRAME;
#define etpu_if_SPARK_CHANNEL_FRAME_EXPECTED_SIZE 56


/* data structure of all 24-bit SPARK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				tdc_angle;
	/* 0x0004 */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0008 */
	etpu_if_sint32				angle_offset_recalc;
	/* 0x000c */
	etpu_if_uint32				dwell_time_min;
	/* 0x0010 */
	etpu_if_uint32				dwell_time_max;
	/* 0x0014 */
	etpu_if_uint32				multi_on_time;
	/* 0x0018 */
	etpu_if_uint32				multi_off_time;
	/* 0x001c */
	etpu_if_uint32				p_single_spark_first;
	/* 0x0020 */
	etpu_if_uint32				p_single_spark;
	/* 0x0024 */
	etpu_if_uint32				pulse_start_time;
	/* 0x0028 */
	etpu_if_uint32				dwell_time_applied;
	/* 0x002c */
	etpu_if_uint32				dwell_time;
	/* 0x0030 */
	etpu_if_sint32				end_angle;
	/* 0x0034 */
	etpu_if_sint32				angle_offset_recalc_working;
} etpu_if_SPARK_CHANNEL_FRAME_PSE;
#define etpu_if_SPARK_CHANNEL_FRAME_PSE_EXPECTED_SIZE 56


/* data structure of all signed 24-bit SPARK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				tdc_angle;
	/* 0x0004 */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0008 */
	etpu_if_sint32				angle_offset_recalc;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_sint32				end_angle;
	/* 0x0034 */
	etpu_if_sint32				angle_offset_recalc_working;
} etpu_if_SPARK_CHANNEL_FRAME_signedPSE;
#define etpu_if_SPARK_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 56


/* data structure of all unsigned 24-bit SPARK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32				dwell_time_min;
	/* 0x0010 */
	etpu_if_uint32				dwell_time_max;
	/* 0x0014 */
	etpu_if_uint32				multi_on_time;
	/* 0x0018 */
	etpu_if_uint32				multi_off_time;
	/* 0x001c */
	etpu_if_uint32				p_single_spark_first;
	/* 0x0020 */
	etpu_if_uint32				p_single_spark;
	/* 0x0024 */
	etpu_if_uint32				pulse_start_time;
	/* 0x0028 */
	etpu_if_uint32				dwell_time_applied;
	/* 0x002c */
	etpu_if_uint32				dwell_time;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
} etpu_if_SPARK_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_SPARK_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 56


/* data structure (map) of all non-24-bit CRANK CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				tcr1_clock_source_div1;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint8				teeth_till_gap;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_sint8				teeth_in_gap;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint8				teeth_per_cycle;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint8				teeth_per_sync;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_uint8				tooth_counter_gap;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0018 */
	etpu_if_uint8				tooth_counter_cycle;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x001c */
	etpu_if_uint8				blank_teeth;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0020 */
	etpu_if_uint8				state;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0024 */
	etpu_if_uint8				error;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
	/* 0x0038 */
	etpu_if_uint32 : 32;
	/* 0x003c */
	etpu_if_uint32				link_cam;
	/* 0x0040 */
	etpu_if_uint32				link_1;
	/* 0x0044 */
	etpu_if_uint32				link_2;
	/* 0x0048 */
	etpu_if_uint32				link_3;
	/* 0x004c */
	etpu_if_uint32				link_4;
	/* 0x0050 */
	etpu_if_uint32 : 32;
	/* 0x0054 */
	etpu_if_uint16				misscnt_mask;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
} etpu_if_CRANK_CHANNEL_FRAME;
#define etpu_if_CRANK_CHANNEL_FRAME_EXPECTED_SIZE 88


/* data structure of all 24-bit CRANK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				blank_time;
	/* 0x0004 */
	etpu_if_uint32				tcr2_ticks_per_tooth;
	/* 0x0008 */
	etpu_if_uint32				tcr2_ticks_per_add_tooth;
	/* 0x000c */
	etpu_if_uint32				last_tooth_tcr1_time;
	/* 0x0010 */
	etpu_if_uint32				last_tooth_period;
	/* 0x0014 */
	etpu_if_uint32				last_tooth_period_norm;
	/* 0x0018 */
	etpu_if_uint32				last_last_tooth_period_norm;
	/* 0x001c */
	etpu_if_uint32				additional_tooth_period;
	/* 0x0020 */
	etpu_if_sint32				tcr2_adjustment;
	/* 0x0024 */
	etpu_if_uint32				gap_ratio;
	/* 0x0028 */
	etpu_if_uint32				win_ratio_normal;
	/* 0x002c */
	etpu_if_uint32				win_ratio_across_gap;
	/* 0x0030 */
	etpu_if_uint32				win_ratio_after_gap;
	/* 0x0034 */
	etpu_if_uint32				win_ratio_after_timeout;
	/* 0x0038 */
	etpu_if_uint32				first_tooth_timeout;
	/* 0x003c */
	etpu_if_uint32 : 32;
	/* 0x0040 */
	etpu_if_uint32 : 32;
	/* 0x0044 */
	etpu_if_uint32 : 32;
	/* 0x0048 */
	etpu_if_uint32 : 32;
	/* 0x004c */
	etpu_if_uint32 : 32;
	/* 0x0050 */
	etpu_if_uint32				tooth_period_log;
	/* 0x0054 */
	etpu_if_uint32 : 32;
} etpu_if_CRANK_CHANNEL_FRAME_PSE;
#define etpu_if_CRANK_CHANNEL_FRAME_PSE_EXPECTED_SIZE 88


/* data structure of all signed 24-bit CRANK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_sint32				tcr2_adjustment;
	/* 0x0024 */
	etpu_if_uint32 : 32;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
	/* 0x0038 */
	etpu_if_uint32 : 32;
	/* 0x003c */
	etpu_if_uint32 : 32;
	/* 0x0040 */
	etpu_if_uint32 : 32;
	/* 0x0044 */
	etpu_if_uint32 : 32;
	/* 0x0048 */
	etpu_if_uint32 : 32;
	/* 0x004c */
	etpu_if_uint32 : 32;
	/* 0x0050 */
	etpu_if_uint32 : 32;
	/* 0x0054 */
	etpu_if_uint32 : 32;
} etpu_if_CRANK_CHANNEL_FRAME_signedPSE;
#define etpu_if_CRANK_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 88


/* data structure of all unsigned 24-bit CRANK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				blank_time;
	/* 0x0004 */
	etpu_if_uint32				tcr2_ticks_per_tooth;
	/* 0x0008 */
	etpu_if_uint32				tcr2_ticks_per_add_tooth;
	/* 0x000c */
	etpu_if_uint32				last_tooth_tcr1_time;
	/* 0x0010 */
	etpu_if_uint32				last_tooth_period;
	/* 0x0014 */
	etpu_if_uint32				last_tooth_period_norm;
	/* 0x0018 */
	etpu_if_uint32				last_last_tooth_period_norm;
	/* 0x001c */
	etpu_if_uint32				additional_tooth_period;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32				gap_ratio;
	/* 0x0028 */
	etpu_if_uint32				win_ratio_normal;
	/* 0x002c */
	etpu_if_uint32				win_ratio_across_gap;
	/* 0x0030 */
	etpu_if_uint32				win_ratio_after_gap;
	/* 0x0034 */
	etpu_if_uint32				win_ratio_after_timeout;
	/* 0x0038 */
	etpu_if_uint32				first_tooth_timeout;
	/* 0x003c */
	etpu_if_uint32 : 32;
	/* 0x0040 */
	etpu_if_uint32 : 32;
	/* 0x0044 */
	etpu_if_uint32 : 32;
	/* 0x0048 */
	etpu_if_uint32 : 32;
	/* 0x004c */
	etpu_if_uint32 : 32;
	/* 0x0050 */
	etpu_if_uint32				tooth_period_log;
	/* 0x0054 */
	etpu_if_uint32 : 32;
} etpu_if_CRANK_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_CRANK_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 88


/* data structure (map) of all non-24-bit KNOCK CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				window_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint8				window_counter;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_uint8				irq_dma_options;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_KNOCK_CHANNEL_FRAME;
#define etpu_if_KNOCK_CHANNEL_FRAME_EXPECTED_SIZE 32


/* data structure of all 24-bit KNOCK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				p_window_first;
	/* 0x0004 */
	etpu_if_uint32				p_window;
	/* 0x0008 */
	etpu_if_sint32				tdc_angle;
	/* 0x000c */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0010 */
	etpu_if_sint32				tcr2_window_start;
	/* 0x0014 */
	etpu_if_sint32				tcr2_window_end;
	/* 0x0018 */
	etpu_if_uint32				trigger_period;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_KNOCK_CHANNEL_FRAME_PSE;
#define etpu_if_KNOCK_CHANNEL_FRAME_PSE_EXPECTED_SIZE 32


/* data structure of all signed 24-bit KNOCK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_sint32				tdc_angle;
	/* 0x000c */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0010 */
	etpu_if_sint32				tcr2_window_start;
	/* 0x0014 */
	etpu_if_sint32				tcr2_window_end;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_KNOCK_CHANNEL_FRAME_signedPSE;
#define etpu_if_KNOCK_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 32


/* data structure of all unsigned 24-bit KNOCK CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				p_window_first;
	/* 0x0004 */
	etpu_if_uint32				p_window;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32				trigger_period;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_KNOCK_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_KNOCK_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 32


/* data structure (map) of all non-24-bit INJ CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				injection_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint8				injection_counter;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_uint8				phase_counter;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint8				bank_chan_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint8				bank_chans_mask_parts_bits31_24;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_uint8				error;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0018 */
	etpu_if_uint8				inactive_polarities;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
} etpu_if_INJ_CHANNEL_FRAME;
#define etpu_if_INJ_CHANNEL_FRAME_EXPECTED_SIZE 40


/* data structure of all 24-bit INJ CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				p_injection_first;
	/* 0x0004 */
	etpu_if_uint32				p_injection;
	/* 0x0008 */
	etpu_if_uint32				p_phase;
	/* 0x000c */
	etpu_if_uint32				bank_chans;
	/* 0x0010 */
	etpu_if_uint32				bank_chans_mask_parts_bits23_0;
	/* 0x0014 */
	etpu_if_sint32				angle_irq;
	/* 0x0018 */
	etpu_if_sint32				angle_stop;
	/* 0x001c */
	etpu_if_sint32				tdc_angle;
	/* 0x0020 */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0024 */
	etpu_if_uint32 : 32;
} etpu_if_INJ_CHANNEL_FRAME_PSE;
#define etpu_if_INJ_CHANNEL_FRAME_PSE_EXPECTED_SIZE 40


/* data structure of all signed 24-bit INJ CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_sint32				angle_irq;
	/* 0x0018 */
	etpu_if_sint32				angle_stop;
	/* 0x001c */
	etpu_if_sint32				tdc_angle;
	/* 0x0020 */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0024 */
	etpu_if_uint32 : 32;
} etpu_if_INJ_CHANNEL_FRAME_signedPSE;
#define etpu_if_INJ_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 40


/* data structure of all unsigned 24-bit INJ CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				p_injection_first;
	/* 0x0004 */
	etpu_if_uint32				p_injection;
	/* 0x0008 */
	etpu_if_uint32				p_phase;
	/* 0x000c */
	etpu_if_uint32				bank_chans;
	/* 0x0010 */
	etpu_if_uint32				bank_chans_mask_parts_bits23_0;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
} etpu_if_INJ_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_INJ_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 40


/* data structure (map) of all non-24-bit FUEL CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				generation_disable;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint8				error;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	union {
		etpu_if_uint8			_UNIT;
		struct {
#if defined(MSB_BITFIELD_ORDER)
			etpu_if_uint8 : 6;
			etpu_if_uint8		is_first_recalc : 1;
			etpu_if_uint8		is_await_recalc : 1;
#elif defined(LSB_BITFIELD_ORDER)
			etpu_if_uint8		is_await_recalc : 1;
			etpu_if_uint8		is_first_recalc : 1;
			etpu_if_uint8 : 6;
#else
#error Users of auto-struct must define either MSB_BITFIELD_ORDER or LSB_BITFIELD_ORDER
#endif
		} _BF;
	} _BF_UNIT_0008;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
	/* 0x0038 */
	etpu_if_uint32 : 32;
	/* 0x003c */
	etpu_if_uint32 : 32;
	/* 0x0040 */
	etpu_if_uint32 : 32;
	/* 0x0044 */
	etpu_if_uint32 : 32;
} etpu_if_FUEL_CHANNEL_FRAME;
#define etpu_if_FUEL_CHANNEL_FRAME_EXPECTED_SIZE 72


/* data structure of all 24-bit FUEL CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				tdc_angle;
	/* 0x0004 */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0008 */
	etpu_if_sint32				angle_normal_end;
	/* 0x000c */
	etpu_if_sint32				angle_stop;
	/* 0x0010 */
	etpu_if_sint32				angle_offset_recalc;
	/* 0x0014 */
	etpu_if_sint32				injection_time;
	/* 0x0018 */
	etpu_if_sint32				compensation_time;
	/* 0x001c */
	etpu_if_sint32				injection_time_minimum;
	/* 0x0020 */
	etpu_if_sint32				off_time_minimum;
	/* 0x0024 */
	etpu_if_sint32				injection_time_applied;
	/* 0x0028 */
	etpu_if_sint32				injection_time_applied_cpu;
	/* 0x002c */
	etpu_if_sint32				injection_start_angle;
	/* 0x0030 */
	etpu_if_sint32				injection_start_angle_cpu;
	/* 0x0034 */
	etpu_if_sint32				pulse_start_time;
	/* 0x0038 */
	etpu_if_sint32				pulse_end_time;
	/* 0x003c */
	etpu_if_sint32				angle_stop_actual_last;
	/* 0x0040 */
	etpu_if_sint32				angle_offset_recalc_working;
	/* 0x0044 */
	etpu_if_uint32 : 32;
} etpu_if_FUEL_CHANNEL_FRAME_PSE;
#define etpu_if_FUEL_CHANNEL_FRAME_PSE_EXPECTED_SIZE 72


/* data structure of all signed 24-bit FUEL CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				tdc_angle;
	/* 0x0004 */
	etpu_if_sint32				tdc_angle_actual;
	/* 0x0008 */
	etpu_if_sint32				angle_normal_end;
	/* 0x000c */
	etpu_if_sint32				angle_stop;
	/* 0x0010 */
	etpu_if_sint32				angle_offset_recalc;
	/* 0x0014 */
	etpu_if_sint32				injection_time;
	/* 0x0018 */
	etpu_if_sint32				compensation_time;
	/* 0x001c */
	etpu_if_sint32				injection_time_minimum;
	/* 0x0020 */
	etpu_if_sint32				off_time_minimum;
	/* 0x0024 */
	etpu_if_sint32				injection_time_applied;
	/* 0x0028 */
	etpu_if_sint32				injection_time_applied_cpu;
	/* 0x002c */
	etpu_if_sint32				injection_start_angle;
	/* 0x0030 */
	etpu_if_sint32				injection_start_angle_cpu;
	/* 0x0034 */
	etpu_if_sint32				pulse_start_time;
	/* 0x0038 */
	etpu_if_sint32				pulse_end_time;
	/* 0x003c */
	etpu_if_sint32				angle_stop_actual_last;
	/* 0x0040 */
	etpu_if_sint32				angle_offset_recalc_working;
	/* 0x0044 */
	etpu_if_uint32 : 32;
} etpu_if_FUEL_CHANNEL_FRAME_signedPSE;
#define etpu_if_FUEL_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 72


/* data structure (map) of all non-24-bit CAM CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint8				error;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
} etpu_if_CAM_CHANNEL_FRAME;
#define etpu_if_CAM_CHANNEL_FRAME_EXPECTED_SIZE 16


/* data structure of all 24-bit CAM CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				log_size;
	/* 0x0004 */
	etpu_if_uint32				log_idx;
	/* 0x0008 */
	etpu_if_uint32				log_count;
	/* 0x000c */
	etpu_if_uint32				log;
} etpu_if_CAM_CHANNEL_FRAME_PSE;
#define etpu_if_CAM_CHANNEL_FRAME_PSE_EXPECTED_SIZE 16


/* data structure of all unsigned 24-bit CAM CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				log_size;
	/* 0x0004 */
	etpu_if_uint32				log_idx;
	/* 0x0008 */
	etpu_if_uint32				log_count;
	/* 0x000c */
	etpu_if_uint32				log;
} etpu_if_CAM_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_CAM_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 16


#endif /* __etpu_set_struct_H */
